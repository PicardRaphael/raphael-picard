---
description: Guidelines for structuring the project using Clean Architecture. Covers separation of concerns, modularity, and best practices for organizing layers (Domain, Application, Infrastructure, Presentation, State Management, Utilities, and Testing).
globs: globs: *.ts, *.tsx, *.json, *.md, *.css, *.mdc
---
# Rules for Clean Architecture Structure

## Overview
This document provides a structured breakdown of a Next.js 15 project using Clean Architecture. Each layer serves a distinct purpose to ensure scalability, maintainability, and separation of concerns.

## Related Guidelines
- **Domain Layer** → [domain-layer.mdc](mdc:.cursor/rules/domain-layer.mdc)
- **Application Layer** → [application-layer.mdc](mdc:.cursor/rules/application-layer.mdc)
- **Infrastructure Layer** →  [infrastructure-layer.mdc](mdc:.cursor/rules/infrastructure-layer.mdc)
- **Presentation Layer** → [presentation-layer.mdc](mdc:.cursor/rules/presentation-layer.mdc)

## Project Structure

```plaintext
/src
├── app/                      # Next.js App Router (Server Components)
│   ├── layout.tsx            # Global layout (Navbar, Footer, etc.)
│   ├── not-found.tsx         # 404 Page
│   ├── error.tsx             # Global error handling
│   ├── api/                  # API Routes (Handled by Use Cases)
│   │   ├── products/
│   │   │   ├── route.ts      # API endpoint for products
│   ├── products/             # Products Page
│   │   ├── page.tsx
│   │   ├── _components/      # Product-specific components
│
├── components/               # Reusable global components
│
├── core/                     # Clean Architecture Core
│   ├── domain/               # Business logic, entities, DTOs, and repositories
│   │   ├── repositories/     # Interfaces for data sources
│   │   ├── dtos/             # Data Transfer Objects (DTOs)
│   │   ├── entities/         # Core domain entities
│   │   ├── mappers/          # Entity to DTO conversion
│   │   ├── errors/           # Custom Error Handling
│   ├── application/          # Application logic (Use Cases)
│   │   ├── use-cases/        # Business use cases
│   │   ├── services/        # Business use cases
│
├── infrastructure/           # External system integrations
│   ├── repositories/
│   │   ├── prisma/           # Database access layer
│   │   ├── storage/           # Database access layer
│   ├── factories/            # Factory pattern for repositories
│
├── libs/                     # External Libraries config (Prisma, React-Query, Supabase...)
│
├── store/                    # Global State Management (Redux, Zustand)
│   ├── react-query/
│   │   ├── product/
│   │   │   ├── queries/      # React Query queries
│   │   │   ├── mutations/    # React Query mutations
│
├── utils/                    # Utility functions (helpers, formatters, etc.)
│
├── tests/                    # Jest Unit and Integration Tests
│
├── styles/                   # Tailwind CSS styles
│   ├── global.css            # Global styles and Tailwind imports
│   ├── themes.css            # Theme files (@theme variables)
│   ├── utilities/            # Custom utility classes (@utility)
│   ├── classes/              # Custom reusable classes (@layer components)
```

## Explanation of Each Layer

### **Domain Layer (`/src/core/domain/`)**  
**Business Logic & Data Models**
- **Entities** → Define the core data structures (e.g., `Product`).
- **Repositories** → Interfaces defining data access operations.
- **DTOs** → Data Transfer Objects ensure consistent validation.
- **Mappers** → Convert between entities and DTOs.
- **Errors** → Centralized custom error handling.

### **Application Layer (`/src/core/application/`)**  
**Use Cases & Business Rules**
- **Services** → Contain business logic independent of UI and infrastructure.
- **Use Cases** → Encapsulate application logic (e.g., fetching, creating products).
- **Rules** → This layer must **not depend on UI or external services**.

### **Infrastructure Layer (`/src/core/infrastructure/`)**  
**Database, APIs & Adapters**
- **Repositories (Prisma, LocalStorage, Supabase, etc.)** → Implement data access logic.
- **Factories** → Resolve dependencies dynamically.

### **Presentation Layer (`/src/app/` & `/src/components/`)**  
**UI & User Interactions**
- **Next.js Pages (`/src/app/`)** → Define Server Components and routes.
- **Reusable Components (`/src/components/`)** → Shared UI elements across the app.
- **API Routes (`/src/app/api/`)** → Handle API calls via Next.js server functions.

### **State Management (`/src/store/`)**  
**Global State Management**
- **React Query (`/src/store/react-query/`)** → Manages API state and caching.
- **Redux/Zustand (`/src/store/`)** → Centralized client-side state.

### **Utilities & Config (`/src/utils/` & `/src/libs/`)**  
**Helpers & External Configurations**
- **Utils** → Helper functions (e.g., formatting, string manipulation).
- **Libs** → Prisma configuration, third-party integrations.

### **Testing (`/src/tests/`)**  
**Ensuring Code Reliability**
- **Unit Tests** → Ensure business logic works as expected.
- **Integration Tests** → Verify interactions between different layers.

---

## **Why Use This Architecture in Next.js 15?**
- **Maintainability** → Modular and easy to update.
- **Scalability** → Supports new features without major refactors.
- **Framework Independence** → Business logic remains decoupled from UI.
- **Testability** → Each layer can be tested in isolation.

---

## **Next Steps**
- Read more about each layer:  
  - **Domain Layer** → [domain-layer.mdc](mdc:.cursor/rules/domain-layer.mdc)
  - **Application Layer** → [application-layer.mdc](mdc:.cursor/rules/application-layer.mdc)
  - **Infrastructure Layer** → [infrastructure-layer.mdc](mdc:.cursor/rules/infrastructure-layer.mdc)
  - **Presentation Layer** → [presentation-layer.mdc](mdc:.cursor/rules/presentation-layer.mdc)

---