---
description: Guidelines for leveraging React 19 features in the project. Covers new hooks, API changes, performance optimizations, and best practices for integrating React 19 capabilities into your codebase, ensuring enhanced efficiency and maintainability.
globs: *.tsx
---
# React 19 Overview

## Introduction

React 19 is the latest stable release, bringing several new features, improvements, and hooks to enhance the development experience. This document provides a comprehensive overview of what's new in React 19, including new hooks, API changes, and performance optimizations.

## New Features in React 19

### 1. Actions

- **Purpose:** Simplifies handling of data mutations, pending states, errors, and optimistic updates.
- **Key Hooks:**

    - `useActionState`: Manages action states, handling pending, success, and error states automatically.

        - **Example:**

            ```jsx
            import { useActionState } from 'react';

            function ActionComponent() {
            	const [actionState, setActionState] = useActionState();

            	const performAction = async () => {
            		setActionState('loading');
            		try {
            			await someAsyncOperation();
            			setActionState('success');
            		} catch (error) {
            			setActionState('error');
            		}
            	};

            	return (
            		<button onClick={performAction} disabled={actionState === 'loading'}>
            			{actionState === 'loading' ? 'Loading...' : 'Perform Action'}
            		</button>
            	);
            }
            ```

    - `useOptimistic`: Supports optimistic UI updates, allowing instant feedback while requests are processed.

        - **Example:**

            ```jsx
            import { useOptimistic } from 'react';

            function OptimisticComponent() {
            	const [optimisticState, setOptimisticState] = useOptimistic();

            	const updateState = () => {
            		setOptimisticState((prev) => ({ ...prev, optimistic: true }));
            	};

            	return <button onClick={updateState}>{optimisticState.optimistic ? 'Optimistic Update' : 'Update'}</button>;
            }
            ```

### 2. New Hooks

- **useTransition:** Manages non-blocking state transitions, keeping the UI responsive during async operations.

    - **Example:**

        ```jsx
        import { useState, useTransition } from 'react';

        function MyComponent() {
        	const [isPending, startTransition] = useTransition();
        	const [count, setCount] = useState(0);

        	const handleClick = () => {
        		startTransition(() => {
        			setCount((c) => c + 1);
        		});
        	};

        	return (
        		<div>
        			<button onClick={handleClick}>Increment</button>
        			{isPending ? 'Loading...' : count}
        		</div>
        	);
        }
        ```

- **useDeferredValue:** Defers a value update until rendering is less critical, improving performance.

    - **Example:**

        ```jsx
        import { useState, useDeferredValue } from 'react';

        function SearchComponent({ searchQuery }) {
        	const deferredQuery = useDeferredValue(searchQuery);

        	return <div>Results for: {deferredQuery}</div>;
        }
        ```

- **useId:** Generates stable unique IDs for components, useful for form elements.

    - **Example:**

        ```jsx
        import { useId } from 'react';

        function FormComponent() {
        	const id = useId();

        	return (
        		<div>
        			<label htmlFor={id}>Name:</label>
        			<input id={id} type="text" />
        		</div>
        	);
        }
        ```

- **useFormStatus:** Tracks form submission status, useful for managing form states.

    - **Example:**

        ```jsx
        import { useFormStatus } from 'react';

        function FormComponent() {
        	const formStatus = useFormStatus();

        	return (
        		<form>
        			<input type="text" name="username" />
        			<button type="submit" disabled={formStatus === 'submitting'}>
        				{formStatus === 'submitting' ? 'Submitting...' : 'Submit'}
        			</button>
        		</form>
        	);
        }
        ```

- **useOptimistic:** Handles optimistic updates, providing immediate UI feedback during async operations.

    - **Example:**

        ```jsx
        import { useOptimistic } from 'react';

        function OptimisticComponent() {
        	const [optimisticState, setOptimisticState] = useOptimistic();

        	const updateState = () => {
        		setOptimisticState((prev) => ({ ...prev, optimistic: true }));
        	};

        	return <button onClick={updateState}>{optimisticState.optimistic ? 'Optimistic Update' : 'Update'}</button>;
        }
        ```

### 3. React DOM Enhancements

- **Static APIs:** New static APIs for React DOM to improve server-side rendering and resource management.
- **Form Actions:** `<form>` elements now support function-based actions, simplifying form handling.

### 4. Improved Error Handling

- **Error Boundaries:** Enhanced error reporting with new root options like `onCaughtError` and `onUncaughtError`.

### 5. Custom Elements Support

- **Integration:** Full support for custom elements, improving compatibility with web components.

### 6. Changes to useRef

- **Enhanced Capabilities:** In React 19, `useRef` has been improved to better handle mutable references, providing more consistent behavior across renders.
- **New Features:**

    - **Stable References:** `useRef` now ensures that the reference remains stable across component updates, reducing the risk of unexpected changes.
    - **Improved Performance:** Optimizations have been made to ensure that `useRef` does not trigger unnecessary re-renders, maintaining efficient component updates.
    - **Child Component References:** `useRef` can now be used more effectively with child components, allowing for direct access to child component instances or DOM nodes without needing `React.forwardRef`.

- **Example:**

    ```jsx
    import { useRef, useImperativeHandle } from 'react';

    function ParentComponent() {
    	const childRef = useRef(null);

    	const focusChildInput = () => {
    		if (childRef.current) {
    			childRef.current.focusInput();
    		}
    	};

    	return (
    		<div>
    			<ChildComponent ref={childRef} />
    			<button onClick={focusChildInput}>Focus Child Input</button>
    		</div>
    	);
    }

    function ChildComponent(props, ref) {
    	const inputRef = useRef(null);

    	useImperativeHandle(ref, () => ({
    		focusInput: () => {
    			if (inputRef.current) {
    				inputRef.current.focus();
    			}
    		},
    	}));

    	return <input ref={inputRef} type="text" />;
    }
    ```

- **Usage Tips:**
    - Use `useRef` for accessing DOM elements directly without causing re-renders.
    - Ideal for storing mutable values that do not affect the component's rendering logic.
    - Leverage `useRef` with `useImperativeHandle` to manage child component references effectively.

## Performance Improvements

- **Preloading Resources:** New APIs for preloading and prefetching resources, optimizing initial page loads.
- **Async Scripts:** Better support for async scripts, ensuring efficient loading and execution.

## How to Upgrade

- **Upgrade Guide:** Follow the @React 19 Upgrade Guide for step-by-step instructions and a list of breaking changes.

## Conclusion

React 19 introduces significant enhancements to improve developer productivity and application performance. By adopting these new features and hooks, developers can build more efficient and responsive applications.

For more details, visit the @official React 19 blog post.
